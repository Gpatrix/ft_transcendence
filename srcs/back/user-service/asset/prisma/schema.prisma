datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model BlockedUser {
  id Int @id @unique @default(autoincrement())
  blockedUserId Int

  userId Int
  user User @relation("UsersToBlockedUsers", fields: [userId], references: [id], onDelete: Cascade)
}

model FriendRequest {
  id Int @id @unique @default(autoincrement())

  authorId Int
  author User @relation("UserToSendedFriendRequests", fields: [authorId], references: [id], onDelete: Cascade)
  targetId Int
  target User @relation("UserToReceivedFriendRequests", fields: [targetId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Friend {
  id Int @id @unique @default(autoincrement())
  friendUserId Int

  userId Int
  user User @relation("UserToFriend", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model User {
  id Int @id @unique @default(autoincrement())
  name String
  email String @unique
  password String?
  profPicture String?
  bio String?
  lang String @default("user")
  rank Int @default(0)
  isAdmin Boolean @default(false)
  twoFactorSecretTemp String?
  twoFactorSecret String?
  isTwoFactorEnabled Boolean @default(false)
  playerTime Int @default(0)

  friends Friend[] @relation("UserToFriend")
  blockedUsers BlockedUser[] @relation("UsersToBlockedUsers")
  sendedFriendRequests FriendRequest[] @relation("UserToSendedFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("UserToReceivedFriendRequests")
}

// not supported with sqlite
// enum Role {
//   USER
//   ADMIN
// }
name: ft_transcendence

services:
  r_proxy:
    container_name: r_proxy
    restart: on-failure
    build:
        context: ./reverse_proxy
        dockerfile: Dockerfile
    ports:
        - 443:443
    networks:
      - router

  auth-service:
    container_name: auth-service
    restart: on-failure
    volumes:
      - ./back/auth-service/asset/srcs:/usr/src/auth-service/asset/srcs
    environment:
      DATABASE_URL: ${DATABASE_URL:?}
      API_CREDENTIAL: ${API_CREDENTIAL:?}
      JWT_SECRET: ${JWT_SECRET:?}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:?}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:?}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:?}
      NODE_ENV: ${NODE_ENV:-production}
      MAIL_ADRESS: ${MAIL_ADRESS}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_SECURE: ${MAIL_SECURE}
      MAIL_SERVICE: ${MAIL_SERVICE}
    build:
        context: ./back/auth-service
        dockerfile: Dockerfile
        args:
          NODE_ENV: ${NODE_ENV:-production}
    expose:
      - 3000
    networks:
      - router

  user-service:
    container_name: user-service
    restart: on-failure
    volumes:
      - ./back/user-service/asset/srcs:/usr/src/user-service/asset/srcs
    environment:
      DATABASE_URL: ${DATABASE_URL:?}
      API_CREDENTIAL: ${API_CREDENTIAL:?}
      JWT_SECRET: ${JWT_SECRET:?}
      NODE_ENV: ${NODE_ENV:-production}
    build:
        context: ./back/user-service
        dockerfile: Dockerfile
        args:
          NODE_ENV: ${NODE_ENV:-production}
    ports:
      - 5555:5555
    expose:
      - 3000
    networks:
      - router

  chat-service:
    container_name: chat-service
    restart: on-failure
    volumes:
      - ./back/chat-service/asset/srcs:/usr/src/chat-service/asset/srcs
      - db-chat:/usr/src/chat-service/asset/prisma/db
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      JWT_SECRET: ${JWT_SECRET:?}
      DATABASE_URL: ${DATABASE_URL:?}
    build:
        context: ./back/chat-service
        dockerfile: Dockerfile
        args:
          DATABASE_URL: ${DATABASE_URL:?}
    expose:
      - 3000
    ports:
      - 9874:5555
    networks:
      - router

  upload-service:
    container_name: upload-service
    restart: on-failure
    volumes:
      - ./back/upload-service/asset/srcs:/usr/src/upload-service/asset/srcs
    environment:
      API_CREDENTIAL: ${API_CREDENTIAL:?}
      NODE_ENV: ${NODE_ENV:-production}
    build:
        context: ./back/upload-service
        dockerfile: Dockerfile
        args:
          NODE_ENV: ${NODE_ENV:-production}
    expose:
      - 3000
    networks:
      - router

  game-service:
    container_name: game-service
    restart: on-failure
    volumes:
      - ./back/game-service/asset/srcs:/usr/src/game-service/asset/srcs
    environment:
      API_CREDENTIAL: ${API_CREDENTIAL:?}
      NODE_ENV: ${NODE_ENV:-production}
    build:
        context: ./back/game-service
        dockerfile: Dockerfile
        args:
          NODE_ENV: ${NODE_ENV:-production}
    expose:
      - 3000
    networks:
      - router

  front_dev:
    container_name: front_dev
    restart: on-failure
    build:
        context: ./front/
        dockerfile: Dockerfile
    expose:
      - 5173
    volumes:
      - data-front:/var/www/html
    networks:
      - router

volumes:
  data-front:
    name: data-front
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./front/vitejs
  db-chat:
    name: db-chat
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./back/chat-service/volume
networks:
  router:
    driver: bridge